# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OE4hgyve33JnsjeAXG2WKJu8JQGp2bqd
"""

import pandas as pd
from datetime import datetime as dt

!pip install chardet
import chardet

with open('/content/dadosAulav1.csv', 'rb') as f:
    result = chardet.detect(f.read())

print(result)

"""## Importar os dados"""

df_aula = pd.read_csv("/content/dadosAulav1.csv", sep=";", parse_dates=["Data de Nascimento"], date_format="%d/%m/%Y", encoding="ISO-8859-1")

df_aula.info()

df_aula.head()

"""## Valores unicos"""

var_cols = ["Mancha", "Pressão", "Doença"]

for col in var_cols:
    unique_vals = df_aula[col].unique()
    print(f"Column: {col}")
    print(unique_vals)
    print("-" * 40)

"""### A coluna `Mancha` precisa ser padronizada

## Verificar duplicatas
"""

df_aula.duplicated().sum()

df_aula.drop_duplicates(inplace=True);

"""## Verificar nulos"""

df_aula.isna().sum()

"""### Algumas entradas tem apenas duas informacoes e nao sao relevantes"""

df_aula_empty_rows = df_aula[df_aula.isnull().any(axis=1)].isnull().sum(axis=1).sort_values(ascending=False)
df_aula_empty_rows = df_aula_empty_rows[df_aula_empty_rows > 1] # Rows with more than one empty column
df_aula_empty_rows

# Drop rows with more than one empty column

df_aula.drop(df_aula_empty_rows.index, axis=0, inplace=True)

# Depois de retirar as linhas vazias tem uma reducao consideravel do numero variaveis vazias

df_aula.isna().sum()

df_any_null = df_aula[df_aula.isnull().any(axis=1)]
df_any_null

"""### Tratamento de `Idade` nula"""

df_null_age = df_any_null[df_any_null["Idade"].isna()]
df_null_age

df_null_age.loc[~df_null_age["Data de Nascimento"].isna(), "Idade"] = dt.now().year - df_null_age.loc[~df_null_age["Data de Nascimento"].isna(), "Data de Nascimento"].dt.year

median_age = int(df_aula["Idade"].median())
df_null_age.loc[df_null_age["Data de Nascimento"].isna(), "Idade"] = median_age

df_aula.loc[df_null_age.index] = df_null_age

"""### Agora que a coluna `Data de Nascimento` ja foi utilizada para completar as entradas faltantes em idade, ela pode ser descartada por conter informacoes redundantes"""

df_aula.drop("Data de Nascimento", axis=1, inplace=True)
df_any_null.drop("Data de Nascimento", axis=1, inplace=True)

"""### Tratamento de `Febre` vazia"""

df_null_fever = df_any_null[df_any_null["Febre"].isna()]
df_null_fever

fever_mean_healthy = round(df_aula[df_aula["Doença"] == "Saudável"]["Febre"].apply("mean"), 1)
fever_mean_A = round(df_aula[df_aula["Doença"] == "A"]["Febre"].apply("mean"), 1)
fever_mean_B = round(df_aula[df_aula["Doença"] == "B"]["Febre"].apply("mean"), 1)
fever_mean_C = round(df_aula[df_aula["Doença"] == "C"]["Febre"].apply("mean"), 1)

print(fever_mean_healthy)
print(fever_mean_A)
print(fever_mean_B)
print(fever_mean_C)

df_null_fever.loc[df_null_fever["Doença"] == "Saudável", "Febre"] = fever_mean_healthy
df_null_fever.loc[df_null_fever["Doença"] == "A", "Febre"] = fever_mean_A
df_null_fever.loc[df_null_fever["Doença"] == "B", "Febre"] = fever_mean_B
df_null_fever.loc[df_null_fever["Doença"] == "C", "Febre"] = fever_mean_C

df_aula.loc[df_null_fever.index] = df_null_fever

"""### Tratamento de `Pressão` vazia

"""

df_null_p = df_any_null[df_any_null["Pressão"].isna()]
df_null_p

p_mode = df_aula["Pressão"].mode()
print(p_mode)

df_null_p["Pressão"] = p_mode

df_aula.loc[df_null_p.index] = df_null_p

"""### Tratamento de `Doença` vazia

Column: Doença
['B' 'A' nan 'Saudável' 'C']

#### Em relação aos dados, a informação sobre a "Doença" que estiver vazia pode ser considerada como “Saudável”.
"""

df_null_d = df_any_null[df_any_null["Doença"].isna()]
df_null_d

df_null_d["Doença"] = "Saudável"

df_aula.loc[df_null_d.index] = df_null_d

"""## Drop variaveis que nao seriam uteis para previsao/classificacao"""

variaveis_inuteis = ["ID", "Nome"]

df_aula.drop(variaveis_inuteis, axis=1, inplace=True)

df_aula.head()

"""## Padronizacao de valores

Column: Mancha
['NÃO' 'Sim' 'nao' 'SIM' 'N' 'S' nan]
"""

df_aula.loc[df_aula["Mancha"] == "Sim", "Mancha"] = "SIM"
df_aula.loc[df_aula["Mancha"] == "S", "Mancha"] = "SIM"
df_aula.loc[df_aula["Mancha"] == "nao", "Mancha"] = "NÃO"
df_aula.loc[df_aula["Mancha"] == "N", "Mancha"] = "NÃO"
df_aula.loc[df_aula["Mancha"] == "Sim", "Mancha"] = "NÃO"

df_aula.head()

"""## Encodificacao de variaveis (dummy, ordinais)

### Para os atributos nominais, será necessário utilizar o método de codificação de variáveis dummy.
"""

atrib_nominais = ["Mancha", "Doença"]

df_aula = pd.get_dummies(df_aula, columns=atrib_nominais)
df_aula.head()

"""### Os atributos ordinais deverão ser mapeados em valores numéricos que representam cada grandeza."""

atrib_ordinais = ["Pressão"]

from sklearn.preprocessing import OrdinalEncoder

encoder = OrdinalEncoder()

df_aula[atrib_ordinais] = encoder.fit_transform(df_aula[atrib_ordinais])

df_aula.head()

"""## Os valores deverão ser normalizados em um intervalo de 0 a 1."""

num_columns = ["Idade", "Febre", "Pressão"]

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

df_aula[num_columns] = scaler.fit_transform(df_aula[num_columns])

df_aula.head()